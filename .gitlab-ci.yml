# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

image: golang:1.19-alpine

variables:

  REPO_NAME: git.pc-ziegert.de/operators/satisfactory

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - test
  - build
  - deploy
  - scan

sast:
  stage: test

container_scanning:
  stage: scan
  needs:
    - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml

format:
  stage: test
  script:
    - apk add --no-cache git build-base
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    #- go test -race $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  needs:
    - format
  script:
    - apk add --no-cache git build-base
    - go mod download
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o $CI_PROJECT_DIR/manager $CI_PROJECT_DIR/main.go
  artifacts:
    paths:
      - manager

deploy:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  needs:
    - compile
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - chmod +x $CI_PROJECT_DIR/manager
    - export TAG=$(cat ${CI_PROJECT_DIR}/VERSION)
    - >-
      /kaniko/executor
      --force
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile.linux-amd64"
      --customPlatform=linux/amd64
      --destination "${CI_REGISTRY_IMAGE}/manager:${TAG}"
  dependencies:
    - compile